import * as fs from 'fs';
import CertificateFactory from './certificateFactory.js';
import { Logger } from './logger.js';
const { assign } = Object;
class SSL {
    constructor(options = true) {
        this.logger = Logger;
        this.key = undefined;
        this.cert = undefined;
        this.ca = undefined;
        this.requestCert = false;
        this.rejectUnauthorized = false;
        const factoryOptions = {};
        const filePaths = {};
        if (typeof options === 'object') {
            const { altIp, commonName, countryName, encryptionBits, stateName, localityName, organizationName, organizationalUnit, validForYears, requestCert, rejectUnauthorized } = options;
            assign(factoryOptions, {
                altIp,
                commonName,
                countryName,
                encryptionBits,
                stateName,
                localityName,
                organizationName,
                organizationalUnit,
                validForYears
            });
            filePaths.key = options.key;
            filePaths.cert = options.cert;
            filePaths.ca = options.ca;
            if (typeof requestCert === 'boolean') {
                this.requestCert = requestCert;
            }
            if (typeof rejectUnauthorized === 'boolean') {
                this.rejectUnauthorized = rejectUnauthorized;
            }
        }
        try {
            if (filePaths.key) {
                this.key = fs.readFileSync(filePaths.key);
            }
            if (filePaths.cert) {
                this.cert = fs.readFileSync(filePaths.cert);
            }
            if (filePaths.ca) {
                this.ca = fs.readFileSync(filePaths.ca);
            }
        }
        catch (e) {
            this.logger.log({
                level: 'ERROR',
                fileName: 'SSL',
                msg: `Error reading certificate files - ${e.toString()}`
            });
            throw e;
        }
        if (!this.key && !this.cert && !this.ca) {
            try {
                const selfSignedCertificateFactory = new CertificateFactory(factoryOptions);
                assign(this, selfSignedCertificateFactory.getStaticBundle('buffer'));
            }
            catch (e) {
                this.logger.log({
                    level: 'ERROR',
                    fileName: 'SSL',
                    msg: `Error generating self-signed certificates - ${e.toString()}`
                });
                throw e;
            }
        }
    }
    //---------------------------------------------------------------------------------------
    //Method: toObject
    //
    //Input: none
    //Output: ssl server configuration object
    //
    //This method returns https server config options generated by this class
    //---------------------------------------------------------------------------------------
    toObject() {
        const { key, cert, ca, rejectUnauthorized, requestCert } = this;
        return {
            key,
            cert,
            ca,
            rejectUnauthorized,
            requestCert
        };
    }
}
export default SSL;
